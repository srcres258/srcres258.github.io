"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[818],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=s(n),u=r,h=d["".concat(p,".").concat(u)]||d[u]||c[u]||i;return n?a.createElement(h,o(o({ref:t},m),{},{components:n})):a.createElement(h,o({ref:t},m))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4973:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={},o="Text Components",l={unversionedId:"misc/components",id:"misc/components",title:"Text Components",description:"A Component is a holder for text which can be formatted and chained with other components via its subtype MutableComponent. A component can be created using one of the available static helpers:",source:"@site/i18n/zh-CN/docusaurus-plugin-content-docs/current/misc/components.md",sourceDirName:"misc",slug:"/misc/components",permalink:"/zh-CN/docs/misc/components",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"\u79fb\u690d\u5230Minecraft 1.20",permalink:"/zh-CN/docs/legacy/porting"},next:{title:"\u914d\u7f6e",permalink:"/zh-CN/docs/misc/config"}},p={},s=[{value:"Applying Style",id:"applying-style",level:2},{value:"Chaining Components",id:"chaining-components",level:2},{value:"Text Formatting",id:"text-formatting",level:2}],m={toc:s},d="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"text-components"},"Text Components"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"Component")," is a holder for text which can be formatted and chained with other components via its subtype ",(0,r.kt)("inlineCode",{parentName:"p"},"MutableComponent"),". A component can be created using one of the available static helpers:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"literal")),(0,r.kt)("td",{parentName:"tr",align:null},"it creates a component which simply wraps the passed in text.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"nullToEmpty")),(0,r.kt)("td",{parentName:"tr",align:null},"it's the same as ",(0,r.kt)("inlineCode",{parentName:"td"},"#literal")," except it creates an empty component if null has been passed")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"translatable")),(0,r.kt)("td",{parentName:"tr",align:null},"it creates a component which is represented as localized text to user, read ",(0,r.kt)("a",{parentName:"td",href:"/zh-CN/docs/concepts/internationalization"},"internationalization")," for more details.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"empty")),(0,r.kt)("td",{parentName:"tr",align:null},"it creates an empty component")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"keybind")),(0,r.kt)("td",{parentName:"tr",align:null},"it creates a component which is represented as the name of current keyboard key of the passed ",(0,r.kt)("a",{parentName:"td",href:"/zh-CN/docs/misc/keymappings"},"key mapping"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"nbt")),(0,r.kt)("td",{parentName:"tr",align:null},"it creates a component for representing nbt data specified by ",(0,r.kt)("inlineCode",{parentName:"td"},"path")," inside ",(0,r.kt)("inlineCode",{parentName:"td"},"dataSource"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"score")),(0,r.kt)("td",{parentName:"tr",align:null},"it creates a component for representing the ",(0,r.kt)("inlineCode",{parentName:"td"},"objective"),"'s score of an entity specified by the ",(0,r.kt)("a",{parentName:"td",href:"https://minecraft.wiki/w/Target_selectors"},"entity selector")," ",(0,r.kt)("inlineCode",{parentName:"td"},"name"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"selector")),(0,r.kt)("td",{parentName:"tr",align:null},"it creates a component for displaying the list of names of entities selected by the ",(0,r.kt)("a",{parentName:"td",href:"https://minecraft.wiki/w/Target_selectors"},"entity selector")," ",(0,r.kt)("inlineCode",{parentName:"td"},"pattern"),".")))),(0,r.kt)("p",null,"A component's text contents are represented by ",(0,r.kt)("inlineCode",{parentName:"p"},"ComponentContents"),". Notably, the subtype ",(0,r.kt)("inlineCode",{parentName:"p"},"TranslatableContents")," not only supports ",(0,r.kt)("a",{parentName:"p",href:"/zh-CN/docs/concepts/internationalization"},"localization")," but also ",(0,r.kt)("a",{parentName:"p",href:"#text-formatting"},"text formatting"),"."),(0,r.kt)("h2",{id:"applying-style"},"Applying Style"),(0,r.kt)("p",null,"Components can be formatted (e.g., bold, click actions, color) via ",(0,r.kt)("inlineCode",{parentName:"p"},"Style"),"s. ",(0,r.kt)("inlineCode",{parentName:"p"},"Style"),"s are immutable, creating a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Style")," each time when modified. The empty style ",(0,r.kt)("inlineCode",{parentName:"p"},"Style#EMPTY")," can be used as a base for configuration."),(0,r.kt)("p",null,"Multiple styles can be merged together with ",(0,r.kt)("inlineCode",{parentName:"p"},"#applyTo(Style other)"),"; ",(0,r.kt)("inlineCode",{parentName:"p"},"other")," will override all non-configured of the current object."),(0,r.kt)("p",null,"After configuring a style, it can be applied to a component with either ",(0,r.kt)("inlineCode",{parentName:"p"},"MutableComponent#setStyle")," for overwriting, or ",(0,r.kt)("inlineCode",{parentName:"p"},"#withStyle")," for merging:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Creates MutableComponent wrapping literal "Hello!"\nMutableComponent text = Component.literal("Hello!");\n\n// Copies empty style and sets color to blue and makes it italic\nStyle blueItalic = Style.EMPTY\n        .withColor(0x0000FF)\n        .withItalic(true);\n\n// Copies empty style and sets color to red\nStyle red = Style.EMPTY \n        .withColor(0xFF0000);\n\n// Copies empty style and makes it bold\nStyle bold = Style.EMPTY\n        .withBold(true);\n\n// Copies empty style and makes it both underlined and strikethrough\nStyle doubleLines = Style.EMPTY\n        .withUnderlined(true)\n        .withStrikethrough(true);\n\n// Sets style of the text to be blue and italic\ntext.setStyle(blueItalic);\n\n// Overwrites blue and italic style to be red, bold, underlined, and strikethrough\ntext.withStyle(red).withStyle(bold).withStyle(doubleLines);\n')),(0,r.kt)("p",null,"This creates a red, bold text with two lines:\n",(0,r.kt)("img",{parentName:"p",src:"/img/component_red_hello.png",alt:"red_hello"})),(0,r.kt)("h2",{id:"chaining-components"},"Chaining Components"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MutableComponent#append")," can chain multiple components together. Chained components can be retrieved with ",(0,r.kt)("inlineCode",{parentName:"p"},"MutableComponent#getSiblings"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Component")," stores its siblings like a tree and is traversed in preorder; the parent style is merged with those of its siblings.\n",(0,r.kt)("img",{parentName:"p",src:"/img/component_graph.png",alt:"tree"})),(0,r.kt)("p",null,"The code below will create a component with the same structure in the above example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Create text only components\nMutableComponent first = Component.literal("first ");\nMutableComponent second = Component.literal("second ");\nMutableComponent third = Component.literal("third ");\nMutableComponent fourth = Component.literal("fourth ");\nMutableComponent fifth = Component.literal("fifth ");\nMutableComponent sixth = Component.literal("sixth ");\nMutableComponent seventh = Component.literal("seventh ");\n\n// Create components with style\nMutableComponent red = Component.litearl("red ").withStyle(Style.EMPTY.withColor(0xFF0000));\nMutableComponent blue = Component.literal("blue ").withStyle(Style.EMPTY.withColor(0x0000FF));\nMutableComponent bold = Component.literal("bold ").withStyle(Style.EMPTY.withBold(true));\n\n// Structure created components in the same way as the image\nred.append(first).append(blue).append(seventh);\nblue.append(second).append(third).append(bold);\nbold.append(fourth).append(fifth).append(sixth);\n')),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"/img/component_style_annotated.png",alt:"style_annotated"})),(0,r.kt)("h2",{id:"text-formatting"},"Text Formatting"),(0,r.kt)("p",null,"Text formatting is the process of inserting data as text into predefined larger text. It can be used for displaying coordinates, showing unit measurements, etc. ",(0,r.kt)("strong",{parentName:"p"},"Format specifiers")," are used for indicating where a text can be inserted."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"TranslatableContents")," allows two types of format specifiers: ",(0,r.kt)("inlineCode",{parentName:"p"},"%s")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"%n$s"),". The component uses the second parameter onwards, denoted as ",(0,r.kt)("inlineCode",{parentName:"p"},"args")," , for holding what object to insert in place of a format specifier."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"%s")," is replaced with elements of ",(0,r.kt)("inlineCode",{parentName:"p"},"args")," in order they appear, i.e., the first ",(0,r.kt)("inlineCode",{parentName:"p"},"%s")," is replaced with the first element of ",(0,r.kt)("inlineCode",{parentName:"p"},"args"),", and so on.\n",(0,r.kt)("inlineCode",{parentName:"p"},"%n$s")," is positional specifier; each positional specifier can denote which element in ",(0,r.kt)("inlineCode",{parentName:"p"},"args")," will replace the specifier via the number ",(0,r.kt)("inlineCode",{parentName:"p"},"n"),"."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Formatting ",(0,r.kt)("inlineCode",{parentName:"li"},"x:%s y:%s z:%s")," with ",(0,r.kt)("inlineCode",{parentName:"li"},"[1, 2, 3]")," as ",(0,r.kt)("inlineCode",{parentName:"li"},"args")," results in ",(0,r.kt)("inlineCode",{parentName:"li"},"x:1 y:2 z:3")),(0,r.kt)("li",{parentName:"ul"},"Formatting ",(0,r.kt)("inlineCode",{parentName:"li"},"Time: %1$s ms")," with ",(0,r.kt)("inlineCode",{parentName:"li"},"17")," as ",(0,r.kt)("inlineCode",{parentName:"li"},"args")," results in ",(0,r.kt)("inlineCode",{parentName:"li"},"Time: 17 ms")),(0,r.kt)("li",{parentName:"ul"},"Formatting ",(0,r.kt)("inlineCode",{parentName:"li"},"Player name: %2$s, HP: %1$s")," with ",(0,r.kt)("inlineCode",{parentName:"li"},"[10.2, Dev]")," as ",(0,r.kt)("inlineCode",{parentName:"li"},"args")," results in ",(0,r.kt)("inlineCode",{parentName:"li"},"Player name: Dev, HP: 10.2"))),(0,r.kt)("p",null,"Any ",(0,r.kt)("inlineCode",{parentName:"p"},"Component")," element within ",(0,r.kt)("inlineCode",{parentName:"p"},"args")," will be transformed into a formatted text string."))}c.isMDXComponent=!0}}]);