"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[9547],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),u=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=o,h=d["".concat(s,".").concat(m)]||d[m]||p[m]||r;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var u=2;u<r;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5827:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>I,default:()=>P,frontMatter:()=>C,metadata:()=>E,toc:()=>j});var a=n(7462),o=n(7294),r=n(3905),i=n(6010),l=n(2466),s=n(6550),u=n(1980),c=n(7392),d=n(12);function p(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:o}}=e;return{value:t,label:n,attributes:a,default:o}}))}function m(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),r=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,u._X)(r),(0,o.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(a.location.search);t.set(r,e),a.replace({...a.location,search:t.toString()})}),[r,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,r=m(e),[i,l]=(0,o.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:r}))),[s,u]=f({queryString:n,groupId:a}),[c,p]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,r]=(0,d.Nk)(n);return[a,(0,o.useCallback)((e=>{n&&r.set(e)}),[n,r])]}({groupId:a}),g=(()=>{const e=s??c;return h({value:e,tabValues:r})?e:null})();(0,o.useLayoutEffect)((()=>{g&&l(g)}),[g]);return{selectedValue:i,selectValue:(0,o.useCallback)((e=>{if(!h({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),p(e)}),[u,p,r]),tabValues:r}}var b=n(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:n,selectedValue:r,selectValue:s,tabValues:u}=e;const c=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),p=e=>{const t=e.currentTarget,n=c.indexOf(t),a=u[n].value;a!==r&&(d(t),s(a))},m=e=>{let t=null;switch(e.key){case"Enter":p(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":n},t)},u.map((e=>{let{value:t,label:n,attributes:l}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,key:t,ref:e=>c.push(e),onKeyDown:m,onClick:p},l,{className:(0,i.Z)("tabs__item",k.tabItem,l?.className,{"tabs__item--active":r===t})}),n??t)})))}function y(e){let{lazy:t,children:n,selectedValue:a}=e;const r=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=r.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function w(e){const t=g(e);return o.createElement("div",{className:(0,i.Z)("tabs-container",k.tabList)},o.createElement(v,(0,a.Z)({},e,t)),o.createElement(y,(0,a.Z)({},e,t)))}function N(e){const t=(0,b.Z)();return o.createElement(w,(0,a.Z)({key:String(t)},e))}const x={tabItem:"tabItem_Ymn6"};function T(e){let{children:t,hidden:n,className:a}=e;return o.createElement("div",{role:"tabpanel",className:(0,i.Z)(x.tabItem,a),hidden:n},t)}const C={},I="Contributing to the Documentation",E={type:"mdx",permalink:"/contributing",source:"@site/src/pages/contributing.mdx",title:"Contributing to the Documentation",description:"This is a non-exhaustive guideline for making contributions to the NeoForged Documentation repository. Contributions can be made by forking and cloning the repository and then added via a pull request, or PR, on the GitHub.",frontMatter:{}},j=[{value:"Principles",id:"principles",level:2},{value:"Concepts",id:"concepts",level:2},{value:"Examples",id:"examples",level:2},{value:"Minor and Patch Changes",id:"minor-and-patch-changes",level:2},{value:"Style Guide",id:"style-guide",level:2},{value:"Front Matter",id:"front-matter",level:3},{value:"Categories",id:"categories",level:4},{value:"Titles",id:"titles",level:3},{value:"Diction",id:"diction",level:3},{value:"Paragraphs",id:"paragraphs",level:3},{value:"Indentation",id:"indentation",level:3},{value:"Importance",id:"importance",level:3},{value:"Code References",id:"code-references",level:3},{value:"Links",id:"links",level:3},{value:"Admonitions",id:"admonitions",level:3}],M={toc:j},O="wrapper";function P(e){let{components:t,...n}=e;return(0,r.kt)(O,(0,a.Z)({},M,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"contributing-to-the-documentation"},"Contributing to the Documentation"),(0,r.kt)("p",null,"This is a non-exhaustive guideline for making contributions to the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/neoforged/Documentation"},"NeoForged Documentation")," repository. Contributions can be made by forking and cloning the repository and then added via a pull request, or PR, on the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/neoforged/Documentation"},"GitHub"),"."),(0,r.kt)("p",null,"You can run the website locally using ",(0,r.kt)("a",{parentName:"p",href:"https://www.npmjs.com/"},"npm"),". It is recommended to use a Node Version Manager like ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/nvm-sh/nvm"},"nvm")," (Mac, Linux) or ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/jasongin/nvs"},"nvs")," (Windows) to setup and install npm and Node. From there, you can run the following commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nvm use # or nvs use on Windows\nnpm install\nnpm run start\n")),(0,r.kt)("h2",{id:"principles"},"Principles"),(0,r.kt)("p",null,"This documentation is a guide to help a modder understand and implement a given concept from Minecraft or NeoForged."),(0,r.kt)("p",null,"This documentation is ",(0,r.kt)("strong",{parentName:"p"},"not")," meant as a tutorial, allowing a modder to copy-paste the examples. If you are looking for a tutorial, there are plenty of videos and pages, which are not linked here, that you can use and follow along with."),(0,r.kt)("p",null,"This documentation is also ",(0,r.kt)("strong",{parentName:"p"},"not")," meant as documentation for a class. Providing a description of an element is unavoidable when writing a guide; however, if you would like to document a class, you should contribute to ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/ParchmentMC/Parchment"},"Parchment for Minecraft")," or ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/neoforged/NeoForge/"},"NeoForge for NeoForged"),"."),(0,r.kt)("p",null,"Finally, this documentation is ",(0,r.kt)("strong",{parentName:"p"},"not")," meant to explain Java concepts. This documentation is intended for people who already have a solid basis in Java. If a Java concept needs to be explained to better understand the concept (such as JVM Descriptors for Access Transformers), a link should be provided to the original resource. Otherwise, if you are unfamiliar with Java, there are plenty of online resources to learn from:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.jetbrains.com/academy/"},"JetBrains Academy")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.codecademy.com/learn/learn-java"},"Codeacademy")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://java-programming.mooc.fi/"},"University of Helsinki")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://docs.oracle.com/javase/tutorial/"},"Oracle")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"http://math.hws.edu/javanotes/"},"Introduction to Programming using Java by David J. Eck"))),(0,r.kt)("h2",{id:"concepts"},"Concepts"),(0,r.kt)("p",null,"Each page should guide a modder on a particular concept. If the concept is too large in scope, the concept should be split into separate sub-concepts, each within its own page. For example, if you are writing a cookbook, there can be a page for each recipe, rather than a single page containing all the recipes."),(0,r.kt)("p",null,"When describing a concept, you should first introduce what the concept is, where it is used in Minecraft, why it should be used, and how to use it. Each section within a concept should have a header. A section can also be broken into sub-sections if necessary. For example, each recipe within a cookbook can have a sub-section for ingredients and the recipe itself."),(0,r.kt)("p",null,"If you need to refer to other concepts, the relevant page should be linked along with a summary and/or some example to understand the application."),(0,r.kt)("h2",{id:"examples"},"Examples"),(0,r.kt)("p",null,"Code examples should generally be pseudocode-like objects meant to enhance the understanding of a modder. For this documentation, pseudocode-like refers to code blocks written in the structure and syntax of the desired language with comments used as placeholders for specific logic that the modder may choose to implement themselves. The code blocks do not necessarily need to be compilable, but each line should have valid syntax and structure of the desired language."),(0,r.kt)("p",null,"When implementing a method, it is usually specific to the desired goal a modder is trying to achieve. As a guide, this documentation aims to be somewhat agnostic to a modder's specific goal, instead covering the general use case."),(0,r.kt)("p",null,"Let's say we are using a method called ",(0,r.kt)("inlineCode",{parentName:"p"},"#applyDiscount")," to take some value off the current price. Not everyone will implement the same logic within the method. So, the pseudocode can leave a comment mentioning what to do instead:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// In some class\n\npublic float applyDiscount(float price) {\n    float newPrice = price;\n    // Apply discount to newPrice\n    // ...\n    return newPrice;\n}\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If the pseudocode is not explanatory enough to understand the concept, then a full code example can be used instead. A full code example should supply dummy values and explain what they represent.")),(0,r.kt)("h2",{id:"minor-and-patch-changes"},"Minor and Patch Changes"),(0,r.kt)("p",null,"If a change occurs between a minor or patch versions of NeoForge, then relevant changes in the documentation should be split into separate sections or put into tabs. This maintains the accuracy of the information depending on the version the modder is currently developing for."),(0,r.kt)("p",null,"Tabs must be in an ",(0,r.kt)("inlineCode",{parentName:"p"},".mdx")," file, not an ",(0,r.kt)("inlineCode",{parentName:"p"},".md")," file, for proper IDE support."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-md"},'import Tabs from \'@theme/Tabs\';\nimport TabItem from \'@theme/TabItem\';\n\n<Tabs defaultValue="latest">\n\x3c!-- Value represents the last supported version of this method. --\x3e\n\x3c!-- Label represents the version range to display to the reader. --\x3e\n<TabItem value="latest" label="Latest">\n\n\x3c!-- Markdown here --\x3e\n```java\npublic void latestMethod() {\n    // ...\n}\n```\n\n</TabItem>\n\x3c!-- There must be an empty line before and after the Markdown text in a tab. --\x3e\n<TabItem value="20.2.67" label="[20.2.35,20.2.67]"> \n\n\x3c!-- Markdown here --\x3e\n```java\npublic void previousMethod() {\n    // ...\n}\n```\n\n</TabItem>\n<TabItem value="20.2.34" label="[20.2.0,20.2.34]">\n\n\x3c!-- Markdown here --\x3e\n```java\npublic void firstMethod() {\n    // ...\n}\n```\n\n</TabItem>\n</Tabs>\n')),(0,r.kt)("p",null,"Output:"),(0,r.kt)(N,{defaultValue:"latest",mdxType:"Tabs"},(0,r.kt)(T,{value:"latest",label:"Latest",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public void latestMethod() {\n    // ...\n}\n"))),(0,r.kt)(T,{value:"20.2.67",label:"[20.2.35,20.2.67]",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public void previousMethod() {\n    // ...\n}\n"))),(0,r.kt)(T,{value:"20.2.34",label:"[20.2.0,20.2.34]",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public void firstMethod() {\n    // ...\n}\n")))),(0,r.kt)("h2",{id:"style-guide"},"Style Guide"),(0,r.kt)("p",null,"This documentation uses ",(0,r.kt)("a",{parentName:"p",href:"https://docusaurus.io/docs/markdown-features"},"Docusaurus"),", which internally uses ",(0,r.kt)("a",{parentName:"p",href:"https://mdxjs.com/guides/"},"MDX"),", to generate the pages. You can find more detailed information about available features on their pages. This style guide will be more focused towards common features and formatting we use in the Markdown files."),(0,r.kt)("h3",{id:"front-matter"},"Front Matter"),(0,r.kt)("p",null,"Front matter defines metadata fields which can affect how the page is rendered. This is denoted using ",(0,r.kt)("inlineCode",{parentName:"p"},"---"),", similar to a code block. The only front matter that should usually be defined is ",(0,r.kt)("inlineCode",{parentName:"p"},"sidebar_position"),", which determines where the page should be rendered on the sidebar."),(0,r.kt)("p",null,"There are other metadata fields like ",(0,r.kt)("inlineCode",{parentName:"p"},"title")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"description"),", but those are typically parsed from the page itself."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-md"},"\x3c!-- Second page in the sidebar --\x3e\n---\nsidebar_position: 2\n---\n")),(0,r.kt)("h4",{id:"categories"},"Categories"),(0,r.kt)("p",null,"Categories are folders within the documentation. They inherit titles and positional data from ",(0,r.kt)("inlineCode",{parentName:"p"},"index.md"),". If an ",(0,r.kt)("inlineCode",{parentName:"p"},"index.md")," is not within a subfolder, a ",(0,r.kt)("inlineCode",{parentName:"p"},"_category_.json")," file should be created, specifying the ",(0,r.kt)("inlineCode",{parentName:"p"},"label")," representing the name of the section, and ",(0,r.kt)("inlineCode",{parentName:"p"},"position")," representing where on the sidebar it should go."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'{\n    // Name of the category to display\n    "label": "Example Title",\n\n    // This will be rendered as the third element on the sidebar at the current level.\n    "position": 3\n}\n')),(0,r.kt)("h3",{id:"titles"},"Titles"),(0,r.kt)("p",null,"Titles are defined using up to six hashtags (",(0,r.kt)("inlineCode",{parentName:"p"},"#"),") to define each section. Titles should capitalize everything but unimportant words."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-md"},"\x3c!-- There should only be one title with a single '#'. --\x3e\n# Guide For Contributing to This Documentation\n\n### Building and Testing Your Mod\n")),(0,r.kt)("h3",{id:"diction"},"Diction"),(0,r.kt)("p",null,"Spelling, grammar, and syntax should follow those in American English. Avoid using contractions in sentences; use two separate words ('is not' instead of 'isn't'). Additionally, avoid using pronouns (e.g. I, me, you) when possible, unless you need to directly refer to the reader. Demonstratives (e.g. this, that, its) should be used sparingly to avoid confusing the reader. Prefer using the actual object or noun being referred to."),(0,r.kt)("h3",{id:"paragraphs"},"Paragraphs"),(0,r.kt)("p",null,"Paragraphs should be a continuous block, separated by a newline. Paragraphs should ",(0,r.kt)("strong",{parentName:"p"},"not")," have each sentence be on a new line."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-md"},"This is my first paragraph. See how the next sentence is on the same line? You can use word wrapping in your editor to stop the line from going off the screen.\n\nThis is my next paragraph. It is separated by a new line.\n")),(0,r.kt)("h3",{id:"indentation"},"Indentation"),(0,r.kt)("p",null,"When indenting lines, use four spaces instead of tabs. Most markdown features require four spaces to recognize indentation, so it allows consistency across the document."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-md"},"* Hello World\n    * Four Spaces In\n")),(0,r.kt)("h3",{id:"importance"},"Importance"),(0,r.kt)("p",null,"Emphasizing words should be done using ",(0,r.kt)("strong",{parentName:"p"},"bold")," or ",(0,r.kt)("em",{parentName:"p"},"italics"),". Please use two asterisks (",(0,r.kt)("inlineCode",{parentName:"p"},"**"),") for bold and an underscore (",(0,r.kt)("inlineCode",{parentName:"p"},"_"),") for italics to make the separation in Markdown more distinct."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-md"},"This is a **bolded** word.\n\nThis is an _italicized_ word.\n")),(0,r.kt)("h3",{id:"code-references"},"Code References"),(0,r.kt)("p",null,"When referencing elements outside of code blocks, they should be surrounded with backticks (",(0,r.kt)("inlineCode",{parentName:"p"},"`"),"). Classes should use their simple name. Methods and fields should specify the class name followed by a ",(0,r.kt)("inlineCode",{parentName:"p"},"#"),". If the class name is implied, the method or field can simply be prefixed with ",(0,r.kt)("inlineCode",{parentName:"p"},"#"),". Inner classes should specify the name of the outer class followed by a ",(0,r.kt)("inlineCode",{parentName:"p"},"."),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-md"},"\x3c!-- Classes --\x3e\n`MyClass`\n`MyClass.InnerClass`\n\n\x3c!-- Method and Fields --\x3e\n`MyClass#foo`\n`MyClass.InnerClass#bar`\n`#SOME_CONSTANT`\n")),(0,r.kt)("p",null,"Code blocks should specify the language after the triple backtick (",(0,r.kt)("inlineCode",{parentName:"p"},"```"),"). When writing a JSON block, the JavaScript (",(0,r.kt)("inlineCode",{parentName:"p"},"js"),") syntax highlighter should be used to allow comments."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-md"},'\x3c!-- Java Code Block --\x3e\n```java\npublic void run() {\n    //...\n}\n```\n\n\x3c!-- JSON Code Block --\x3e\n```js\n{\n    // Comments are allowed here\n    "text": "Hiya"\n}\n```\n')),(0,r.kt)("h3",{id:"links"},"Links"),(0,r.kt)("p",null,"All links should use brackets (",(0,r.kt)("inlineCode",{parentName:"p"},"[]"),") to refer to a link specified on the bottom of the markdown page. The second pair of brackets can be omitted if the name between the first pair of brackets is used."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-md"},"\x3c!-- Somewhere on a page --\x3e\nThere are [two] different types of [link references][linkref].\n\n\x3c!-- At the bottom of a page --\x3e\n[two]: https://linkrefwithoutref.donotclick\n[linkref]: https://linkref.donotclick\n")),(0,r.kt)("h3",{id:"admonitions"},"Admonitions"),(0,r.kt)("p",null,"Admonitions can be specified on the page using three colons (",(0,r.kt)("inlineCode",{parentName:"p"},":::"),") and by specifying its type. Admonition formatting can be found on the ",(0,r.kt)("a",{parentName:"p",href:"https://docusaurus.io/docs/markdown-features/admonitions"},"Docusaurus wiki"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-md"},":::note\nI'm within an admonition!\n:::\n")))}P.isMDXComponent=!0}}]);