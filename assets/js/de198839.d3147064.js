"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[1077],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=r.createContext({}),c=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=c(n),u=i,h=p["".concat(d,".").concat(u)]||p[u]||m[u]||o;return n?r.createElement(h,a(a({ref:t},l),{},{components:n})):r.createElement(h,a({ref:t},l))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=u;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[p]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9477:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={},a="Mod Lifecycle",s={unversionedId:"concepts/lifecycle",id:"concepts/lifecycle",title:"Mod Lifecycle",description:"During the mod loading process, the various lifecycle events are fired on the mod-specific event bus. Many actions are performed during these events, such as registering objects, preparing for data generation, or communicating with other mods.",source:"@site/docs/concepts/lifecycle.md",sourceDirName:"concepts",slug:"/concepts/lifecycle",permalink:"/docs/concepts/lifecycle",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Internationalization and Localization",permalink:"/docs/concepts/internationalization"},next:{title:"Registries",permalink:"/docs/concepts/registries"}},d={},c=[{value:"Registry Events",id:"registry-events",level:2},{value:"Data Generation",id:"data-generation",level:2},{value:"Common Setup",id:"common-setup",level:2},{value:"Sided Setup",id:"sided-setup",level:2},{value:"InterModComms",id:"intermodcomms",level:2}],l={toc:c},p="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"mod-lifecycle"},"Mod Lifecycle"),(0,i.kt)("p",null,"During the mod loading process, the various lifecycle events are fired on the mod-specific event bus. Many actions are performed during these events, such as ",(0,i.kt)("a",{parentName:"p",href:"/docs/concepts/registries#methods-for-registering"},"registering objects"),", preparing for ",(0,i.kt)("a",{parentName:"p",href:"/docs/datagen/"},"data generation"),", or ",(0,i.kt)("a",{parentName:"p",href:"/docs/concepts/lifecycle#intermodcomms"},"communicating with other mods"),"."),(0,i.kt)("p",null,"Event listeners should be registered either using ",(0,i.kt)("inlineCode",{parentName:"p"},"@EventBusSubscriber(bus = Bus.MOD)")," or in the mod constructor:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'@Mod.EventBusSubscriber(modid = "mymod", bus = Mod.EventBusSubscriber.Bus.MOD)\npublic class MyModEventSubscriber {\n  @SubscribeEvent\n  static void onCommonSetup(FMLCommonSetupEvent event) { ... }\n}\n\n@Mod("mymod")\npublic class MyMod {\n  public MyMod() {\n    FMLModLoadingContext.get().getModEventBus().addListener(this::onCommonSetup);\n  } \n\n  private void onCommonSetup(FMLCommonSetupEvent event) { ... }\n}\n')),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Most of the lifecycle events are fired in parallel: all mods will concurrently receive the same event."),(0,i.kt)("p",{parentName:"admonition"},"Mods ",(0,i.kt)("em",{parentName:"p"},"must")," take care to be thread-safe, like when calling other mods' APIs or accessing vanilla systems. Defer code for later execution via ",(0,i.kt)("inlineCode",{parentName:"p"},"ParallelDispatchEvent#enqueueWork"),".")),(0,i.kt)("h2",{id:"registry-events"},"Registry Events"),(0,i.kt)("p",null,"The registry events are fired after the mod instance construction. There are three: ",(0,i.kt)("inlineCode",{parentName:"p"},"NewRegistryEvent"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"DataPackRegistryEvent$NewRegistry")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"RegisterEvent"),". These events are fired synchronously during mod loading."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"NewRegistryEvent")," allows modders to register their own custom registries, using the ",(0,i.kt)("inlineCode",{parentName:"p"},"RegistryBuilder")," class."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"DataPackRegistryEvent$NewRegistry")," allows modders to register custom datapack registries by providing a ",(0,i.kt)("inlineCode",{parentName:"p"},"Codec")," to encode and decode the object from JSON."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"RegisterEvent")," is for ",(0,i.kt)("a",{parentName:"p",href:"/docs/concepts/registries#methods-for-registering"},"registering objects")," into the registries. The event is fired for each registry. "),(0,i.kt)("h2",{id:"data-generation"},"Data Generation"),(0,i.kt)("p",null,"If the game is setup to run ",(0,i.kt)("a",{parentName:"p",href:"/docs/datagen/"},"data generators"),", then the ",(0,i.kt)("inlineCode",{parentName:"p"},"GatherDataEvent")," will be the last event to fire. This event is for registering mods' data providers to their associated data generator. This event is also fired synchronously."),(0,i.kt)("h2",{id:"common-setup"},"Common Setup"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"FMLCommonSetupEvent")," is for actions that are common to both physical client and server, such as registering ",(0,i.kt)("a",{parentName:"p",href:"/docs/datastorage/capabilities"},"capabilities"),"."),(0,i.kt)("h2",{id:"sided-setup"},"Sided Setup"),(0,i.kt)("p",null,"The sided-setup events are fired on their respective ",(0,i.kt)("a",{parentName:"p",href:"/docs/concepts/sides"},"physical sides"),": ",(0,i.kt)("inlineCode",{parentName:"p"},"FMLClientSetupEvent")," on the physical client, and ",(0,i.kt)("inlineCode",{parentName:"p"},"FMLDedicatedServerSetupEvent")," for the dedicated server. This is where physical side-specific initialization should occur, such as registering client-side key bindings."),(0,i.kt)("h2",{id:"intermodcomms"},"InterModComms"),(0,i.kt)("p",null,"This is where messages can be sent to mods for cross-mod compatibility. There are two events: ",(0,i.kt)("inlineCode",{parentName:"p"},"InterModEnqueueEvent")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"InterModProcessEvent"),"."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"InterModComms")," is the class responsible for holding messages for mods. The methods are safe to call during the lifecycle events, as it is backed by a ",(0,i.kt)("inlineCode",{parentName:"p"},"ConcurrentMap"),"."),(0,i.kt)("p",null,"During the ",(0,i.kt)("inlineCode",{parentName:"p"},"InterModEnqueueEvent"),", use ",(0,i.kt)("inlineCode",{parentName:"p"},"InterModComms#sendTo")," to send messages to different mods. These methods take in the mod id that will be sent the message, the key associated with the message data, and a supplier holding the message data. Additionally, the sender of the message can also be specified, but by default it will be the mod id of the caller."),(0,i.kt)("p",null,"Then during the ",(0,i.kt)("inlineCode",{parentName:"p"},"InterModProcessEvent"),", use ",(0,i.kt)("inlineCode",{parentName:"p"},"InterModComms#getMessages")," to get a stream of all received messages. The mod id supplied will almost always be the mod id of the mod the method is called on. Additionally, a predicate can be specified to filter out the message keys. This will return a stream of ",(0,i.kt)("inlineCode",{parentName:"p"},"IMCMessage"),"s which hold the sender of the data, the receiver of the data, the data key, and the supplied data itself."),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"There are two other lifecycle events: ",(0,i.kt)("inlineCode",{parentName:"p"},"FMLConstructModEvent"),", fired directly after mod instance construction but before the ",(0,i.kt)("inlineCode",{parentName:"p"},"RegisterEvent"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"FMLLoadCompleteEvent"),", fired after the ",(0,i.kt)("inlineCode",{parentName:"p"},"InterModComms")," events, for when the mod loading process is complete.")))}m.isMDXComponent=!0}}]);