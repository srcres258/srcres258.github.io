"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[359],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",f={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=p(n),c=a,u=m["".concat(s,".").concat(c)]||m[c]||f[c]||i;return n?r.createElement(u,o(o({ref:t},d),{},{components:n})):r.createElement(u,o({ref:t},d))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:a,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2833:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>f,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const i={},o="Root Transforms",l={unversionedId:"rendering/modelextensions/transforms",id:"rendering/modelextensions/transforms",title:"Root Transforms",description:"Adding the transform entry at the top level of a model JSON suggests to the loader that a transformation should be applied to all geometry right before the rotations in the blockstate] file in the case of a block model, and before the [display transforms in the case of an item model. The transformation is available through IGeometryBakingContext#getRootTransform() in IUnbakedGeometry#bake().",source:"@site/docs/rendering/modelextensions/transforms.md",sourceDirName:"rendering/modelextensions",slug:"/rendering/modelextensions/transforms",permalink:"/docs/rendering/modelextensions/transforms",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Render Types",permalink:"/docs/rendering/modelextensions/rendertypes"},next:{title:"Part Visibility",permalink:"/docs/rendering/modelextensions/visibility"}},s={},p=[{value:"Element-wise specification",id:"element-wise-specification",level:2},{value:"Origin",id:"origin",level:3},{value:"Translation",id:"translation",level:3},{value:"Left and Right Rotation",id:"left-and-right-rotation",level:3},{value:"Scale",id:"scale",level:3}],d={toc:p},m="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(m,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"root-transforms"},"Root Transforms"),(0,a.kt)("p",null,"Adding the ",(0,a.kt)("inlineCode",{parentName:"p"},"transform")," entry at the top level of a model JSON suggests to the loader that a transformation should be applied to all geometry right before the rotations in the ",(0,a.kt)("a",{parentName:"p",href:"https://minecraft.wiki/w/Tutorials/Models#Block_states"},"blockstate")," file in the case of a block model, and before the ",(0,a.kt)("a",{parentName:"p",href:"/docs/rendering/modelloaders/transform"},"display transforms")," in the case of an item model. The transformation is available through ",(0,a.kt)("inlineCode",{parentName:"p"},"IGeometryBakingContext#getRootTransform()")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"IUnbakedGeometry#bake()"),"."),(0,a.kt)("p",null,"Custom model loaders may ignore this field entirely."),(0,a.kt)("p",null,"The root transforms can be specified in two formats:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"A JSON object containing a singular ",(0,a.kt)("inlineCode",{parentName:"li"},"matrix")," entry containing a raw transformation matrix in the form of a nested JSON array with the last row omitted (3*4 matrix, row major order). The matrix is the composition of the translation, left rotation, scale, right rotation and the transformation origin in that order. Example demonstrating the structure:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-js"},'"transform": {\n    "matrix": [\n        [ 0, 0, 0, 0 ],\n        [ 0, 0, 0, 0 ],\n        [ 0, 0, 0, 0 ]\n    ]\n}\n'))),(0,a.kt)("li",{parentName:"ol"},"A JSON object containing any combination of the following optional entries:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"origin"),": origin point used for the rotations and scaling"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"translation"),": relative translation"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"rotation")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"left_rotation"),": rotation around the translated origin to be applied before scaling"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"scale"),": scale relative to the translated origin"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"right_rotation")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"post_rotation"),": rotation around the translated origin to be applied after scaling")))),(0,a.kt)("h2",{id:"element-wise-specification"},"Element-wise specification"),(0,a.kt)("p",null,"If the transformation is specified as a combination of the entries mentioned in option 4, these entries will be applied in the order of ",(0,a.kt)("inlineCode",{parentName:"p"},"translation"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"left_rotation"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"scale"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"right_rotation"),".",(0,a.kt)("br",{parentName:"p"}),"\n","The transformation is moved to the specified origin as a last step."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'{\n    "transform": {\n        "origin": "center",\n        "translation": [ 0, 0.5, 0 ],\n        "rotation": { "y": 45 }\n    },\n    // ...\n}\n')),(0,a.kt)("p",null,"The elements are expected to be defined as follows:"),(0,a.kt)("h3",{id:"origin"},"Origin"),(0,a.kt)("p",null,"The origin can be specified either as an array of 3 floating point values representing a three-dimensional vector: ",(0,a.kt)("inlineCode",{parentName:"p"},"[ x, y, z ]")," or as one of the three default values:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"corner"')," (0, 0, 0)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"center"')," (.5, .5, .5)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"opposing-corner"')," (1, 1, 1)")),(0,a.kt)("p",null,"If the origin is not specified, it defaults to ",(0,a.kt)("inlineCode",{parentName:"p"},'"opposing-corner"'),"."),(0,a.kt)("h3",{id:"translation"},"Translation"),(0,a.kt)("p",null,"The translation must be specified as an array of 3 floating point values representing a three-dimensional vector: ",(0,a.kt)("inlineCode",{parentName:"p"},"[ x, y, z ]")," and defaults to (0, 0, 0) if not present."),(0,a.kt)("h3",{id:"left-and-right-rotation"},"Left and Right Rotation"),(0,a.kt)("p",null,"The rotations can be specified in any one of the following four ways:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Single JSON object with a single axis => rotation degree mapping: ",(0,a.kt)("inlineCode",{parentName:"li"},'{ "x": 90 }')),(0,a.kt)("li",{parentName:"ul"},"Array of an arbitrary amount of JSON objects with the above format (applied in the order they are specified in): ",(0,a.kt)("inlineCode",{parentName:"li"},'[ { "x": 90 }, { "y": 45 }, { "x": -22.5 } ]')),(0,a.kt)("li",{parentName:"ul"},"Array of 3 floating point values specifying the rotation in degrees around each axis: ",(0,a.kt)("inlineCode",{parentName:"li"},"[ 90, 180, 45 ]")),(0,a.kt)("li",{parentName:"ul"},"Array of 4 floating point values specifying a quaternion directly: ",(0,a.kt)("inlineCode",{parentName:"li"},"[ 0.38268346, 0, 0, 0.9238795 ]")," (example equals 45 degrees around the X axis)")),(0,a.kt)("p",null,"If the respective rotation is not specified, it will default to no rotation."),(0,a.kt)("h3",{id:"scale"},"Scale"),(0,a.kt)("p",null,"The scale must be specified as an array of 3 floating point values representing a three-dimensional vector: ",(0,a.kt)("inlineCode",{parentName:"p"},"[ x, y, z ]")," and defaults to (1, 1, 1) if not present."))}f.isMDXComponent=!0}}]);