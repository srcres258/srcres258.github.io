"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[6196],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>h});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),c=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=c(e.components);return n.createElement(d.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),p=c(a),u=r,h=p["".concat(d,".").concat(u)]||p[u]||m[u]||o;return a?n.createElement(h,l(l({ref:t},s),{},{components:a})):n.createElement(h,l({ref:t},s))}));function h(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=u;var i={};for(var d in t)hasOwnProperty.call(t,d)&&(i[d]=t[d]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var c=2;c<o;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},7e3:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=a(7462),r=(a(7294),a(3905));const o={},l="Saved Data",i={unversionedId:"datastorage/saveddata",id:"datastorage/saveddata",title:"Saved Data",description:"The Saved Data (SD) system is an alternative to level capabilities that can attach data per level.",source:"@site/docs/datastorage/saveddata.md",sourceDirName:"datastorage",slug:"/datastorage/saveddata",permalink:"/docs/datastorage/saveddata",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Codecs",permalink:"/docs/datastorage/codecs"},next:{title:"Particles",permalink:"/docs/gameeffects/particles"}},d={},c=[{value:"Declaration",id:"declaration",level:2},{value:"Attaching to a Level",id:"attaching-to-a-level",level:2}],s={toc:c},p="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(p,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"saved-data"},"Saved Data"),(0,r.kt)("p",null,"The Saved Data (SD) system is an alternative to level capabilities that can attach data per level."),(0,r.kt)("h2",{id:"declaration"},"Declaration"),(0,r.kt)("p",null,"Each SD implementation must subtype the ",(0,r.kt)("inlineCode",{parentName:"p"},"SavedData")," class. There are two important methods to be aware of:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"save"),": Allows the implementation to write NBT data to the level."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"setDirty"),": A method that must be called after changing the data, to notify the game that there are changes that need to be written. If not called, ",(0,r.kt)("inlineCode",{parentName:"li"},"#save")," will not get called and the existing data will persist.")),(0,r.kt)("h2",{id:"attaching-to-a-level"},"Attaching to a Level"),(0,r.kt)("p",null,"Any ",(0,r.kt)("inlineCode",{parentName:"p"},"SavedData")," is loaded and/or attached to a level dynamically. As such, if one is never created on a level, then it will not exist."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SavedData"),"s are created and loaded from the ",(0,r.kt)("inlineCode",{parentName:"p"},"DimensionDataStorage"),", which can be accessed by either ",(0,r.kt)("inlineCode",{parentName:"p"},"ServerChunkCache#getDataStorage")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"ServerLevel#getDataStorage"),". From there, you can get or create an instance of your SD by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"DimensionDataStorage#computeIfAbsent"),". This will attempt to get the current instance of the SD if present or create a new one and load all available data."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"DimensionDataStorage#computeIfAbsent")," takes in three arguments: a function to load NBT data into a SD and return it, a supplier to construct a new instance of the SD, and the name of the ",(0,r.kt)("inlineCode",{parentName:"p"},".dat")," file stored within the ",(0,r.kt)("inlineCode",{parentName:"p"},"data")," folder for the implemented level."),(0,r.kt)("p",null,'For example, if a SD was named "example" within the Nether, then a file would be created at ',(0,r.kt)("inlineCode",{parentName:"p"},"./<level_folder>/DIM-1/data/example.dat")," and would be implemented like so:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// In some class\npublic ExampleSavedData create() {\n  return new ExampleSavedData();\n}\n\npublic ExampleSavedData load(CompoundTag tag) {\n  ExampleSavedData data = this.create();\n  // Load saved data\n  return data;\n}\n\n// In some method within the class\nnetherDataStorage.computeIfAbsent(this::load, this::create, "example");\n')),(0,r.kt)("p",null,"To persist a SD across levels, a SD should be attached to the Overworld, which can be obtained from ",(0,r.kt)("inlineCode",{parentName:"p"},"MinecraftServer#overworld"),". The Overworld is the only dimension that is never fully unloaded and as such makes it perfect to store multi-level data on."))}m.isMDXComponent=!0}}]);