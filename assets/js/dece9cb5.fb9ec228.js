"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[6783],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),c=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,h=d["".concat(p,".").concat(u)]||d[u]||m[u]||i;return n?a.createElement(h,o(o({ref:t},l),{},{components:n})):a.createElement(h,o({ref:t},l))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3959:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={},o="Recipes",s={unversionedId:"resources/server/recipes/index",id:"resources/server/recipes/index",title:"Recipes",description:"Recipes are a way to transform some number of objects into other objects within a Minecraft world. Although the vanilla system deals purely with item transformations, the system as a whole can be expanded to use any object the programmer creates.",source:"@site/docs/resources/server/recipes/index.md",sourceDirName:"resources/server/recipes",slug:"/resources/server/recipes/",permalink:"/docs/resources/server/recipes/",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Loot Tables",permalink:"/docs/resources/server/loottables"},next:{title:"Custom Recipes",permalink:"/docs/resources/server/recipes/custom"}},p={},c=[{value:"Data-Driven Recipes",id:"data-driven-recipes",level:2},{value:"Recipe Manager",id:"recipe-manager",level:2},{value:"Additional Features",id:"additional-features",level:2},{value:"Recipe ItemStack Result",id:"recipe-itemstack-result",level:3},{value:"Conditional Recipes",id:"conditional-recipes",level:3},{value:"Larger Crafting Grids",id:"larger-crafting-grids",level:3},{value:"Ingredient Types",id:"ingredient-types",level:3}],l={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"recipes"},"Recipes"),(0,r.kt)("p",null,"Recipes are a way to transform some number of objects into other objects within a Minecraft world. Although the vanilla system deals purely with item transformations, the system as a whole can be expanded to use any object the programmer creates."),(0,r.kt)("h2",{id:"data-driven-recipes"},"Data-Driven Recipes"),(0,r.kt)("p",null,"Most recipe implementations within vanilla are data driven via JSON. This means that a mod is not necessary to create a new recipe, only a ",(0,r.kt)("a",{parentName:"p",href:"https://minecraft.wiki/w/Data_pack"},"Data pack"),". A full list on how to create and put these recipes within the mod's ",(0,r.kt)("inlineCode",{parentName:"p"},"resources")," folder can be found on the ",(0,r.kt)("a",{parentName:"p",href:"https://minecraft.wiki/w/Recipe"},"Minecraft Wiki"),"."),(0,r.kt)("p",null,"A recipe can be obtained within the Recipe Book as a reward for completing an ",(0,r.kt)("a",{parentName:"p",href:"/docs/resources/server/advancements"},"advancement"),". Recipe advancements always have ",(0,r.kt)("inlineCode",{parentName:"p"},"minecraft:recipes/root")," as their parent, to not to appear on the advancement screen. The default criteria to gain the recipe advancement is a check if the user has unlocked the recipe from using it once or receiving it through a command like ",(0,r.kt)("inlineCode",{parentName:"p"},"/recipe"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// Within some recipe advancement json\n"has_the_recipe": { // Criteria label\n  // Succeeds if examplemod:example_recipe is used\n  "trigger": "minecraft:recipe_unlocked",\n  "conditions": {\n    "recipe": "examplemod:example_recipe"\n  }\n}\n//...\n"requirements": [\n  [\n    "has_the_recipe"\n    // ... Other criteria labels to be ORed against to unlock recipe\n  ]\n]\n')),(0,r.kt)("p",null,"Data-driven recipes and their unlocking advancement can be ",(0,r.kt)("a",{parentName:"p",href:"/docs/datagen/server/recipes"},"generated")," via ",(0,r.kt)("inlineCode",{parentName:"p"},"RecipeProvider"),"."),(0,r.kt)("h2",{id:"recipe-manager"},"Recipe Manager"),(0,r.kt)("p",null,"Recipes are loaded and stored via the ",(0,r.kt)("inlineCode",{parentName:"p"},"RecipeManager"),". Any operations relating to getting available recipe(s) are handled by this manager. There are two important methods to know of:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Method"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"getRecipeFor")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Gets the first recipe that matches the current input.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"getRecipesFor")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Gets all recipes that match the current input.")))),(0,r.kt)("p",null,"Each method takes in a ",(0,r.kt)("inlineCode",{parentName:"p"},"RecipeType"),", which denotes what method is being applied to use the recipe (crafting, smelting, etc.), a ",(0,r.kt)("inlineCode",{parentName:"p"},"Container")," which holds the configuration of the inputs, and the current level which is passed to ",(0,r.kt)("inlineCode",{parentName:"p"},"Recipe#matches")," along with the container."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Forge provides the ",(0,r.kt)("inlineCode",{parentName:"p"},"RecipeWrapper")," utility class which extends ",(0,r.kt)("inlineCode",{parentName:"p"},"Container")," for wrapping around ",(0,r.kt)("inlineCode",{parentName:"p"},"IItemHandler"),"s and passing them to methods which requires a ",(0,r.kt)("inlineCode",{parentName:"p"},"Container")," parameter."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Within some method with IItemHandlerModifiable handler\nrecipeManger.getRecipeFor(RecipeType.CRAFTING, new RecipeWrapper(handler), level);\n"))),(0,r.kt)("h2",{id:"additional-features"},"Additional Features"),(0,r.kt)("p",null,"Forge provides some additional behavior to the recipe schema and its implementations for greater control of the system."),(0,r.kt)("h3",{id:"recipe-itemstack-result"},"Recipe ItemStack Result"),(0,r.kt)("p",null,"Except for ",(0,r.kt)("inlineCode",{parentName:"p"},"minecraft:stonecutting")," recipes, all vanilla recipe serializers expand the ",(0,r.kt)("inlineCode",{parentName:"p"},"result")," tag to take in a full ",(0,r.kt)("inlineCode",{parentName:"p"},"ItemStack")," as a ",(0,r.kt)("inlineCode",{parentName:"p"},"JsonObject")," instead of just the item name and amount in some cases."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// In some recipe JSON\n"result": {\n  // The name of the registry item to give as a result\n  "item": "examplemod:example_item",\n  // The number of items to return\n  "count": 4,\n  // The tag data of the stack, can also be a string\n  "nbt": {\n      // Add tag data here\n  }\n}\n')),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"The ",(0,r.kt)("inlineCode",{parentName:"p"},"nbt")," tag can alternatively be a string containing a stringified NBT (or SNBT) for data which cannot be properly represented as a JSON object (such as ",(0,r.kt)("inlineCode",{parentName:"p"},"IntArrayTag"),"s).")),(0,r.kt)("h3",{id:"conditional-recipes"},"Conditional Recipes"),(0,r.kt)("p",null,"Recipes and their unlocking advancement can be ",(0,r.kt)("a",{parentName:"p",href:"/docs/resources/server/conditional#implementations"},"loaded conditionally and defaulted")," depending on what information is present (mod loaded, item exists, etc.)."),(0,r.kt)("h3",{id:"larger-crafting-grids"},"Larger Crafting Grids"),(0,r.kt)("p",null,"By default, vanilla declares a maximum width and height for a crafting grid to be a 3x3 square. This can be expanded by calling ",(0,r.kt)("inlineCode",{parentName:"p"},"ShapedRecipe#setCraftingSize")," with the new width and height in ",(0,r.kt)("inlineCode",{parentName:"p"},"FMLCommonSetupEvent"),"."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"ShapedRecipe#setCraftingSize")," is ",(0,r.kt)("strong",{parentName:"p"},"NOT")," thread-safe. As such, it should be enqueued to the synchronous work queue via ",(0,r.kt)("inlineCode",{parentName:"p"},"FMLCommonSetupEvent#enqueueWork"),".")),(0,r.kt)("p",null,"Larger crafting grids in recipes can be ",(0,r.kt)("a",{parentName:"p",href:"/docs/datagen/server/recipes"},"data generated"),"."),(0,r.kt)("h3",{id:"ingredient-types"},"Ingredient Types"),(0,r.kt)("p",null,"A few additional ",(0,r.kt)("a",{parentName:"p",href:"/docs/resources/server/recipes/ingredients#forge-types"},"ingredient types")," are added to allow recipes to have inputs which check tag data or combine multiple ingredients into a single input checker."))}m.isMDXComponent=!0}}]);