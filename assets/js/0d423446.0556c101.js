"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[6926],{3905:(e,n,a)=>{a.d(n,{Zo:()=>p,kt:()=>g});var t=a(7294);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function o(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=t.createContext({}),s=function(e){var n=t.useContext(d),a=n;return e&&(a="function"==typeof e?e(n):o(o({},n),e)),a},p=function(e){var n=s(e.components);return t.createElement(d.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(a),m=r,g=c["".concat(d,".").concat(m)]||c[m]||u[m]||i;return a?t.createElement(g,o(o({ref:n},p),{},{components:a})):t.createElement(g,o({ref:n},p))}));function g(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var l={};for(var d in n)hasOwnProperty.call(n,d)&&(l[d]=n[d]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return t.createElement.apply(null,o)}return t.createElement.apply(null,a)}m.displayName="MDXCreateElement"},1674:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var t=a(7462),r=(a(7294),a(3905));const i={},o="Jar-in-Jar",l={unversionedId:"docs/dependencies/jarinjar",id:"docs/dependencies/jarinjar",title:"Jar-in-Jar",description:"Jar-in-Jar is a way to load dependencies for mods from within the jars of the mods. To accomplish this, Jar-in-Jar generates a metadata json within META-INF/jarjar/metadata.json on build containing the artifacts to load from within the jar.",source:"@site/neogradle/docs/dependencies/jarinjar.md",sourceDirName:"docs/dependencies",slug:"/docs/dependencies/jarinjar",permalink:"/neogradle/docs/dependencies/jarinjar",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"ngSidebar",previous:{title:"Dependencies",permalink:"/neogradle/docs/dependencies/"},next:{title:"Getting Started with ForgeGradle",permalink:"/neogradle/docs/gettingstarted/"}},d={},s=[{value:"Adding Dependencies",id:"adding-dependencies",level:2},{value:"Using Runtime Dependencies",id:"using-runtime-dependencies",level:3},{value:"Publishing a Jar-in-Jar to Maven",id:"publishing-a-jar-in-jar-to-maven",level:2}],p={toc:s},c="wrapper";function u(e){let{components:n,...a}=e;return(0,r.kt)(c,(0,t.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"jar-in-jar"},"Jar-in-Jar"),(0,r.kt)("p",null,"Jar-in-Jar is a way to load dependencies for mods from within the jars of the mods. To accomplish this, Jar-in-Jar generates a metadata json within ",(0,r.kt)("inlineCode",{parentName:"p"},"META-INF/jarjar/metadata.json")," on build containing the artifacts to load from within the jar."),(0,r.kt)("p",null,"Jar-in-Jar is a completely optional system which can be enabled using ",(0,r.kt)("inlineCode",{parentName:"p"},"jarJar#enable")," before the ",(0,r.kt)("inlineCode",{parentName:"p"},"minecraft")," block. This will include all dependencies from the ",(0,r.kt)("inlineCode",{parentName:"p"},"jarJar")," configuration into the ",(0,r.kt)("inlineCode",{parentName:"p"},"jarJar")," task. You can configure the task similarly to other jar tasks:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gradle"},"// In build.gradle\n\n// Enable the Jar-in-Jar system for your mod\njarJar.enable()\n\n\n// Configure the 'jarJar' task\n// 'all' is the default classifier\ntasks.named('jarJar') {\n    // ...\n}\n")),(0,r.kt)("h2",{id:"adding-dependencies"},"Adding Dependencies"),(0,r.kt)("p",null,"You can add dependencies to be included inside your jar using the ",(0,r.kt)("inlineCode",{parentName:"p"},"jarJar")," configuration. As Jar-in-Jar is a negotiation system, all versions should supply a supported range."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gradle"},"// In build.gradle\ndependencies {\n    // Compiles against and includes the highest supported version of examplelib\n    //   between 2.0 (inclusive) and 3.0 (exclusive)\n    jarJar(group: 'com.example', name: 'examplelib', version: '[2.0,3.0)')\n}\n")),(0,r.kt)("p",null,"If you need to specify an exact version to include rather than the highest supported version in the range, you can use ",(0,r.kt)("inlineCode",{parentName:"p"},"jarJar#pin")," within the dependency closure. In these instances, the artifact version will be used during compile time while the pinned version will be bundled inside the mod jar."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gradle"},"// In build.gradle\ndependencies {\n    // Compiles against the highest supported version of examplelib\n    //   between 2.0 (inclusive) and 3.0 (exclusive)\n    jarJar(group: 'com.example', name: 'examplelib', version: '[2.0,3.0)') {\n      // Includes examplelib 2.8.0\n      jarJar.pin(it, '2.8.0')\n    }\n}\n")),(0,r.kt)("p",null,"You can additionally pin a version range while compiling against a specific version instead:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gradle"},"// In build.gradle\ndependencies {\n    // Compiles against examplelib 2.8.0\n    jarJar(group: 'com.example', name: 'examplelib', version: '2.8.0') {\n      // Includes the highest supported version of examplelib\n      //   between 2.0 (inclusive) and 3.0 (exclusive)\n      jarJar.pin(it, '[2.0,3.0)')\n    }\n}\n")),(0,r.kt)("h3",{id:"using-runtime-dependencies"},"Using Runtime Dependencies"),(0,r.kt)("p",null,"If you would like to include the runtime dependencies of your mod inside your jar, you can invoke ",(0,r.kt)("inlineCode",{parentName:"p"},"jarJar#fromRuntimeConfiguration")," within your buildscript. If you decide to use this option, it is highly suggested to include dependency filters; otherwise, every single dependency -- including Minecraft and Forge -- will be bundled in the jar as well. To support more flexible statements, the ",(0,r.kt)("inlineCode",{parentName:"p"},"dependency")," configuration has been added to the ",(0,r.kt)("inlineCode",{parentName:"p"},"jarJar")," extension and task. Using this, you can specify patterns to include or exclude from the configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gradle"},"// In build.gradle\n\n// Add runtime dependencies to jar\njarJar.fromRuntimeConfiguration()\n\n// ...\n\njarJar {\n    // Include or exclude dependencies here from runtime configuration\n    dependencies {\n        // Exclude any dependency which begins with 'com.google.gson.'\n        exclude(dependency('com.google.gson.*'))\n    }\n}\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"It is generally recommended to set at least one ",(0,r.kt)("inlineCode",{parentName:"p"},"include")," filter when using ",(0,r.kt)("inlineCode",{parentName:"p"},"#fromRuntimeConfiguration"),".")),(0,r.kt)("h2",{id:"publishing-a-jar-in-jar-to-maven"},"Publishing a Jar-in-Jar to Maven"),(0,r.kt)("p",null,"For archival reasons, ForgeGradle supports publishing Jar-in-Jar artifacts to a maven of choice, similar to how the ",(0,r.kt)("a",{parentName:"p",href:"https://imperceptiblethoughts.com/shadow/getting-started/"},"Shadow plugin")," handles it. In practices, this is not useful or recommended."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-gradle"},"// In build.gradle (has 'maven-publish' plugin)\n\npublications {\n    mavenJava(MavenPublication) {\n        // Add standard java components and Jar-in-Jar artifact\n        from components.java\n        jarJar.component(it)\n\n        // ...\n    }\n}\n")))}u.isMDXComponent=!0}}]);