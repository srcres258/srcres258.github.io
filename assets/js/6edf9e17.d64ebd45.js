"use strict";(self.webpackChunkneoforged_docs=self.webpackChunkneoforged_docs||[]).push([[9082],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>k});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),u=r,k=m["".concat(d,".").concat(u)]||m[u]||c[u]||i;return n?a.createElement(k,o(o({ref:t},p),{},{components:n})):a.createElement(k,o({ref:t},p))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},722:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={},o="Model Generation",l={unversionedId:"datagen/client/modelproviders",id:"datagen/client/modelproviders",title:"Model Generation",description:"Models] can be generated for models or block states by default. Each provides a method of generating the necessary JSONs (ModelBuilder#toJson for models and IGeneratedBlockState#toJson for block states). After implementation, the [associated providers must be added to the DataGenerator.",source:"@site/docs/datagen/client/modelproviders.md",sourceDirName:"datagen/client",slug:"/datagen/client/modelproviders",permalink:"/docs/datagen/client/modelproviders",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"mainSidebar",previous:{title:"Language Generation",permalink:"/docs/datagen/client/localization"},next:{title:"Sound Definition Generation",permalink:"/docs/datagen/client/sounds"}},d={},s=[{value:"Model Files",id:"model-files",level:2},{value:"Existing Model Files",id:"existing-model-files",level:3},{value:"Unchecked Model Files",id:"unchecked-model-files",level:3},{value:"Model Builders",id:"model-builders",level:2},{value:"<code>BlockModelBuilder</code>",id:"blockmodelbuilder",level:3},{value:"<code>ItemModelBuilder</code>",id:"itemmodelbuilder",level:3},{value:"Model Providers",id:"model-providers",level:2},{value:"<code>BlockModelProvider</code>",id:"blockmodelprovider",level:3},{value:"<code>ItemModelProvider</code>",id:"itemmodelprovider",level:3},{value:"Block State Provider",id:"block-state-provider",level:2},{value:"<code>VariantBlockStateBuilder</code>",id:"variantblockstatebuilder",level:3},{value:"<code>MultiPartBlockStateBuilder</code>",id:"multipartblockstatebuilder",level:3},{value:"Model Loader Builders",id:"model-loader-builders",level:2},{value:"Custom Model Loader Builders",id:"custom-model-loader-builders",level:2},{value:"Custom Model Providers",id:"custom-model-providers",level:2},{value:"Custom Model Consumers",id:"custom-model-consumers",level:2}],p={toc:s},m="wrapper";function c(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"model-generation"},"Model Generation"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/resources/client/models/"},"Models")," can be generated for models or block states by default. Each provides a method of generating the necessary JSONs (",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder#toJson")," for models and ",(0,r.kt)("inlineCode",{parentName:"p"},"IGeneratedBlockState#toJson")," for block states). After implementation, the ",(0,r.kt)("a",{parentName:"p",href:"#model-providers"},"associated providers")," must be ",(0,r.kt)("a",{parentName:"p",href:"/docs/datagen/#data-providers"},"added")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"DataGenerator"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// On the MOD event bus\n@SubscribeEvent\npublic void gatherData(GatherDataEvent event) {\n    DataGenerator gen = event.getGenerator();\n    ExistingFileHelper efh = event.getExistingFileHelper();\n\n    gen.addProvider(\n        // Tell generator to run only when client assets are generating\n        event.includeClient(),\n        output -> new MyItemModelProvider(output, MOD_ID, efh)\n    );\n    gen.addProvider(\n        event.includeClient(),\n        output -> new MyBlockStateProvider(output, MOD_ID, efh)\n    );\n}\n")),(0,r.kt)("h2",{id:"model-files"},"Model Files"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelFile")," acts as the base for all models referenced or generated by a provider. Each model file stores the location relative to the ",(0,r.kt)("inlineCode",{parentName:"p"},"models")," subdirectory and can assert whether the file exists."),(0,r.kt)("h3",{id:"existing-model-files"},"Existing Model Files"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"ExistingModelFile")," is a subclass of ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelFile")," which checks via ",(0,r.kt)("a",{parentName:"p",href:"/docs/datagen/#existing-files"},(0,r.kt)("inlineCode",{parentName:"a"},"ExistingFileHelper#exists"))," whether the model already exists within the ",(0,r.kt)("inlineCode",{parentName:"p"},"models")," subdirectory. All non-generated models are usually referenced through ",(0,r.kt)("inlineCode",{parentName:"p"},"ExistingModelFile"),"s."),(0,r.kt)("h3",{id:"unchecked-model-files"},"Unchecked Model Files"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"UncheckedModelFile")," is a subclass of ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelFile")," which assumes the specified model exists in some location."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"There should be no cases where an ",(0,r.kt)("inlineCode",{parentName:"p"},"UncheckedModelFile")," is used to reference a model. If there is, then the associated resources are not properly being tracked by ",(0,r.kt)("inlineCode",{parentName:"p"},"ExistingFileHelper"),".")),(0,r.kt)("h2",{id:"model-builders"},"Model Builders"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder")," represents a to-be-generated ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelFile"),". It contains all the data about a model: its parent, faces, textures, transformations, lighting, and ",(0,r.kt)("a",{parentName:"p",href:"#custom-model-loader-builders"},"loader"),"."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"While a complex model can be generated, it is recommended that those models be constructed using a modeling software beforehand. Then, the data provider can generate the children models with specific textures applied through the defined references in the parent complex model.")),(0,r.kt)("p",null,"The parent (via ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder#parent"),") of the builder can be any ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelFile"),": generated or existing. Generated files are added to ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelProvider"),"s as soon as the builder is created. The builder itself can be passed in as a parent, or the ",(0,r.kt)("inlineCode",{parentName:"p"},"ResourceLocation")," can supplied alternatively."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If the parent is not generated before the child model when passing in a ",(0,r.kt)("inlineCode",{parentName:"p"},"ResourceLocation"),", then an exception will be thrown.")),(0,r.kt)("p",null,"Each element (via ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder#element"),") within a model is defined as cube using two three-dimensional points (",(0,r.kt)("inlineCode",{parentName:"p"},"ElementBuilder#from")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"#to")," respectively) where each axis is limited to the values ",(0,r.kt)("inlineCode",{parentName:"p"},"[-16,32]")," (between -16 and 32 inclusive). Each face (",(0,r.kt)("inlineCode",{parentName:"p"},"ElementBuilder#face"),") of the cube can specify when the face is culled (",(0,r.kt)("inlineCode",{parentName:"p"},"FaceBuilder#cullface"),"), ",(0,r.kt)("a",{parentName:"p",href:"/docs/resources/client/models/tinting#blockcoloritemcolor"},"tint index")," (",(0,r.kt)("inlineCode",{parentName:"p"},"FaceBuilder#tintindex"),"), texture reference from the ",(0,r.kt)("inlineCode",{parentName:"p"},"textures")," keys (",(0,r.kt)("inlineCode",{parentName:"p"},"FaceBuilder#texture"),"), UV coordinate on the texture (",(0,r.kt)("inlineCode",{parentName:"p"},"FaceBuilder#uvs"),"), and rotation in 90 degree intervals (",(0,r.kt)("inlineCode",{parentName:"p"},"FaceBuilder#rotation"),")."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"It recommended for block models which have elements that exceed a bound of ",(0,r.kt)("inlineCode",{parentName:"p"},"[0,16]")," on any axis to separate into multiple blocks, such as for a multiblock structure, to avoid lighting and culling issues.")),(0,r.kt)("p",null,"Each cube can additionally be rotated (",(0,r.kt)("inlineCode",{parentName:"p"},"ElementBuilder#rotation"),") around a specified point (",(0,r.kt)("inlineCode",{parentName:"p"},"RotationBuilder#origin"),") for a given axis (",(0,r.kt)("inlineCode",{parentName:"p"},"RotationBuilder#axis"),") in 22.5 degree intervals (",(0,r.kt)("inlineCode",{parentName:"p"},"RotationBuilder#angle"),"). The cube can scale all faces in relation to the entire model as well (",(0,r.kt)("inlineCode",{parentName:"p"},"RotationBuilder#rescale"),"). The cube can also determine whether its shadows should be rendered (",(0,r.kt)("inlineCode",{parentName:"p"},"ElementBuilder#shade"),")."),(0,r.kt)("p",null,"Each model defines a list of texture keys (",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder#texture"),") which points to either a location or a reference. Each key can then be referenced in any element by prefixing using a ",(0,r.kt)("inlineCode",{parentName:"p"},"#")," (a texture key of ",(0,r.kt)("inlineCode",{parentName:"p"},"example")," can be referenced in an element using ",(0,r.kt)("inlineCode",{parentName:"p"},"#example"),"). A location specifies where a texture is in ",(0,r.kt)("inlineCode",{parentName:"p"},"assets/<namespace>/textures/<path>.png"),". A reference is used by any models parenting the current model as keys to define textures for later."),(0,r.kt)("p",null,"The model can additionally be transformed (",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder#transforms"),") for any defined perspective (in the left hand in first person, in the gui, on the ground, etc.). For any perspective (",(0,r.kt)("inlineCode",{parentName:"p"},"TransformsBuilder#transform"),"), the rotation (",(0,r.kt)("inlineCode",{parentName:"p"},"TransformVecBuilder#rotation"),"), translation (",(0,r.kt)("inlineCode",{parentName:"p"},"TransformVecBuilder#translation"),"), and scale (",(0,r.kt)("inlineCode",{parentName:"p"},"TransformVecBuilder#scale"),") can be set."),(0,r.kt)("p",null,"Finally, the model can set whether to use ambient occlusion in a level (",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder#ao"),") and from what location to light and shade the model from ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder#guiLight"),"."),(0,r.kt)("h3",{id:"blockmodelbuilder"},(0,r.kt)("inlineCode",{parentName:"h3"},"BlockModelBuilder")),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockModelBuilder")," represents a block model to-be-generated. In addition to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder"),", a transform to the entire model (",(0,r.kt)("inlineCode",{parentName:"p"},"BlockModelBuilder#rootTransform"),") can be generated. The root can be translated (",(0,r.kt)("inlineCode",{parentName:"p"},"RootTransformBuilder#transform"),"), rotated (",(0,r.kt)("inlineCode",{parentName:"p"},"RootTransformBuilder#rotation"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"RootTransformBuilder#postRotation"),"), and scaled (",(0,r.kt)("inlineCode",{parentName:"p"},"RootTransformBuilder#scale"),") either individually or all in one transformation (",(0,r.kt)("inlineCode",{parentName:"p"},"RootTransformBuilder#transform"),") around some origin (",(0,r.kt)("inlineCode",{parentName:"p"},"RootTransformBuilder#origin"),")."),(0,r.kt)("h3",{id:"itemmodelbuilder"},(0,r.kt)("inlineCode",{parentName:"h3"},"ItemModelBuilder")),(0,r.kt)("p",null,"An ",(0,r.kt)("inlineCode",{parentName:"p"},"ItemModelBuilder")," represents an item model to-be-generated. In addition to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder"),", ",(0,r.kt)("a",{parentName:"p",href:"/docs/resources/client/models/itemproperties"},"overrides")," (",(0,r.kt)("inlineCode",{parentName:"p"},"OverrideBuilder#override"),") can be generated. Each override applied to a model can apply conditions which represent for a given property that must be above the specified value (",(0,r.kt)("inlineCode",{parentName:"p"},"OverrideBuilder#predicate"),"). If the conditions are met, then the specified model (",(0,r.kt)("inlineCode",{parentName:"p"},"OverrideBuilder#model"),") will be rendered instead of this model."),(0,r.kt)("h2",{id:"model-providers"},"Model Providers"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelProvider")," subclasses are responsible for generating the constructed ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder"),"s. The provider takes in the generator, mod id, subdirectory in the ",(0,r.kt)("inlineCode",{parentName:"p"},"models")," folder to generate within, a ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder")," factory, and the existing file helper. Each provider subclass must implement ",(0,r.kt)("inlineCode",{parentName:"p"},"#registerModels"),"."),(0,r.kt)("p",null,"The provider contains basic methods which either create the ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder")," or provides convenience for getting texture or model references:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Method"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"getBuilder")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Creates a new ",(0,r.kt)("inlineCode",{parentName:"td"},"ModelBuilder")," within the provider's subdirectory for the given mod id.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"withExistingParent")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Creates a new ",(0,r.kt)("inlineCode",{parentName:"td"},"ModelBuilder")," for the given parent. Should be used when the parent is not generated by the builder.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"mcLoc")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Creates a ",(0,r.kt)("inlineCode",{parentName:"td"},"ResourceLocation")," for the path in the ",(0,r.kt)("inlineCode",{parentName:"td"},"minecraft")," namespace.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"modLoc")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Creates a ",(0,r.kt)("inlineCode",{parentName:"td"},"ResourceLocation")," for the path in the given mod id's namespace.")))),(0,r.kt)("p",null,"Additionally, there are several helpers for easily generating common models using vanilla templates. Most are for block models with only a few being universal."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Although the models are within a specific subdirectory, that does ",(0,r.kt)("strong",{parentName:"p"},"not")," mean that the model cannot be referenced by a model in another subdirectory. Usually, it is indicative of that model being used for that type of object.")),(0,r.kt)("h3",{id:"blockmodelprovider"},(0,r.kt)("inlineCode",{parentName:"h3"},"BlockModelProvider")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockModelProvider")," is used for generating block models via ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockModelBuilder")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"block")," folder. Block models should typically parent ",(0,r.kt)("inlineCode",{parentName:"p"},"minecraft:block/block")," or one of its children models for use with item models."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Block models and its item model counterpart are typically not generated through a direct subclass of ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockModelProvider")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"ItemModelProvider")," but through ",(0,r.kt)("a",{parentName:"p",href:"#block-state-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"BlockStateProvider")),".")),(0,r.kt)("h3",{id:"itemmodelprovider"},(0,r.kt)("inlineCode",{parentName:"h3"},"ItemModelProvider")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ItemModelProvider")," is used for generating block models via ",(0,r.kt)("inlineCode",{parentName:"p"},"ItemModelBuilder")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"item")," folder. Most item models parent ",(0,r.kt)("inlineCode",{parentName:"p"},"item/generated")," and use ",(0,r.kt)("inlineCode",{parentName:"p"},"layer0")," to specify their texture, which can be done using ",(0,r.kt)("inlineCode",{parentName:"p"},"#singleTexture"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"item/generated")," can support five texture layers stacked on top of each other: ",(0,r.kt)("inlineCode",{parentName:"p"},"layer0"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"layer1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"layer2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"layer3"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"layer4"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// In some ItemModelProvider#registerModels\n\n// Will generate 'assets/<modid>/models/item/example_item.json'\n// Parent will be 'minecraft:item/generated'\n// For the texture key 'layer0'\n//  It will be at 'assets/<modid>/textures/item/example_item.png'\nthis.basicItem(EXAMPLE_ITEM.get());\n")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Item models for blocks should typically parent an existing block model instead of generating a separate model for an item.")),(0,r.kt)("h2",{id:"block-state-provider"},"Block State Provider"),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockStateProvider")," is responsible for generating ",(0,r.kt)("a",{parentName:"p",href:"https://minecraft.wiki/w/Tutorials/Models#Block_states"},"block state JSONs")," in ",(0,r.kt)("inlineCode",{parentName:"p"},"blockstates"),", block models in ",(0,r.kt)("inlineCode",{parentName:"p"},"models/block"),", and item models in ",(0,r.kt)("inlineCode",{parentName:"p"},"models/item")," for said blocks. The provider takes in the data generator, mod id, and existing file helper. Each ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockStateProvider")," subclass must implement ",(0,r.kt)("inlineCode",{parentName:"p"},"#registerStatesAndModels"),"."),(0,r.kt)("p",null,"The provider contains basic methods for generating block state JSONs and block models. Item models must be generated separately as a block state JSON may define multiple models to use in different contexts. There are a number of common methods, however, that that the modder should be aware of when dealing with more complex tasks:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Method"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"models")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Gets the ",(0,r.kt)("a",{parentName:"td",href:"#blockmodelprovider"},(0,r.kt)("inlineCode",{parentName:"a"},"BlockModelProvider"))," used to generate the item block models.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"itemModels")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Gets the ",(0,r.kt)("a",{parentName:"td",href:"#itemmodelprovider"},(0,r.kt)("inlineCode",{parentName:"a"},"ItemModelProvider"))," used to generate the item block models.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"modLoc")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Creates a ",(0,r.kt)("inlineCode",{parentName:"td"},"ResourceLocation")," for the path in the given mod id's namespace.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"mcLoc")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Creates a ",(0,r.kt)("inlineCode",{parentName:"td"},"ResourceLocation")," for the path in the ",(0,r.kt)("inlineCode",{parentName:"td"},"minecraft")," namespace.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"blockTexture")),(0,r.kt)("td",{parentName:"tr",align:"left"},"References a texture within ",(0,r.kt)("inlineCode",{parentName:"td"},"textures/block")," which has the same name as the block.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"simpleBlockItem")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Creates an item model for a block given the associated model file.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"simpleBlockWithItem")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Creates a single block state for a block model and an item model using the block model as its parent.")))),(0,r.kt)("p",null,"A block state JSON is made up of variants or conditions. Each variant or condition references a ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfiguredModelList"),": a list of ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfiguredModel"),"s. Each configured model contains the model file (via ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfiguredModel$Builder#modelFile"),"), the X and Y rotation in 90 degree intervals (via ",(0,r.kt)("inlineCode",{parentName:"p"},"#rotationX")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"rotationY")," respectively), whether the texture can rotate when the model is rotated by the block state JSON (via ",(0,r.kt)("inlineCode",{parentName:"p"},"#uvLock"),"), and the weight of the model appearing compared to other models in the list (via ",(0,r.kt)("inlineCode",{parentName:"p"},"#weight"),")."),(0,r.kt)("p",null,"The builder (",(0,r.kt)("inlineCode",{parentName:"p"},"ConfiguredModel#builder"),") can also create an array of ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfiguredModel"),"s by creating the next model using ",(0,r.kt)("inlineCode",{parentName:"p"},"#nextModel")," and repeating the settings until ",(0,r.kt)("inlineCode",{parentName:"p"},"#build")," is called."),(0,r.kt)("h3",{id:"variantblockstatebuilder"},(0,r.kt)("inlineCode",{parentName:"h3"},"VariantBlockStateBuilder")),(0,r.kt)("p",null,"Variants can be generated using ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockStateProvider#getVariantBuilder"),". Each variant specifies a list of ",(0,r.kt)("a",{parentName:"p",href:"/docs/blocks/states#implementing-block-states"},"properties")," (",(0,r.kt)("inlineCode",{parentName:"p"},"PartialBlockstate"),") which when matches a ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockState")," in a level, will display a model chosen from the corresponding model list. An exception is thrown if there is a ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockState")," which is not covered by any variant defined. Only one variant can be true for any ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockState"),"."),(0,r.kt)("p",null,"A ",(0,r.kt)("inlineCode",{parentName:"p"},"PartialBlockstate")," is typically defined using one of three methods:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Method"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"partialState")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Creates a ",(0,r.kt)("inlineCode",{parentName:"td"},"PartialBlockstate")," to be defined.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"forAllStates")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Defines a function where a given ",(0,r.kt)("inlineCode",{parentName:"td"},"BlockState")," can be represented by an array of ",(0,r.kt)("inlineCode",{parentName:"td"},"ConfiguredModel"),"s.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"forAllStatesExcept")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Defines a function similar to ",(0,r.kt)("inlineCode",{parentName:"td"},"#forAllStates"),"; however, it also specifies which properties do not affect the models rendered.")))),(0,r.kt)("p",null,"For a ",(0,r.kt)("inlineCode",{parentName:"p"},"PartialBlockstate"),", the properties defined can be specified (",(0,r.kt)("inlineCode",{parentName:"p"},"#with"),"). The configured models can be set (",(0,r.kt)("inlineCode",{parentName:"p"},"#setModels"),"), appended to the existing models (",(0,r.kt)("inlineCode",{parentName:"p"},"#addModels"),"), or built (",(0,r.kt)("inlineCode",{parentName:"p"},"#modelForState")," and then ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfiguredModel$Builder#addModel")," once finished instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"#ConfiguredModel$Builder#build"),")."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// In some BlockStateProvider#registerStatesAndModels\n\n// EXAMPLE_BLOCK_1: Has Property BlockStateProperties#AXIS\nthis.getVariantBuilder(EXAMPLE_BLOCK_1) // Get variant builder\n  .partialState() // Construct partial state\n  .with(AXIS, Axis.Y) // When BlockState AXIS = Y\n    .modelForState() // Set models when AXIS = Y\n    .modelFile(yModelFile1) // Can show 'yModelFile1'\n    .nextModel() // Adds another model when AXIS = Y\n    .modelFile(yModelFile2) // Can show 'yModelFile2'\n    .weight(2) // Will show 'yModelFile2' 2/3 of the time\n    .addModel() // Finalizes models when AXIS = Y\n  .with(AXIS, Axis.Z) // When BlockState AXIS = Z\n    .modelForState() // Set models when AXIS = Z\n    .modelFile(hModelFile) // Can show 'hModelFile'\n    .addModel() // Finalizes models when AXIS = Z\n  .with(AXIS, Axis.X)  // When BlockState AXIS = X\n    .modelForState() // Set models when AXIS = X\n    .modelFile(hModelFile) // Can show 'hModelFile'\n    .rotationY(90) // Rotates 'hModelFile' 90 degrees on the Y axis\n    .addModel(); // Finalizes models when AXIS = X\n\n// EXAMPLE_BLOCK_2: Has Property BlockStateProperties#HORIZONTAL_FACING\nthis.getVariantBuilder(EXAMPLE_BLOCK_2) // Get variant builder\n  .forAllStates(state -> // For all possible states\n    ConfiguredModel.builder() // Creates configured model builder\n      .modelFile(modelFile) // Can show 'modelFile'\n      .rotationY((int) state.getValue(HORIZONTAL_FACING).toYRot()) // Rotates 'modelFile' on the Y axis depending on the property\n      .build() // Creates the array of configured models\n  );\n\n// EXAMPLE_BLOCK_3: Has Properties BlockStateProperties#HORIZONTAL_FACING, BlockStateProperties#WATERLOGGED\nthis.getVariantBuilder(EXAMPLE_BLOCK_3) // Get variant builder\n  .forAllStatesExcept(state -> // For all HORIZONTAL_FACING states\n    ConfiguredModel.builder() // Creates configured model builder\n      .modelFile(modelFile) // Can show 'modelFile'\n      .rotationY((int) state.getValue(HORIZONTAL_FACING).toYRot()) // Rotates 'modelFile' on the Y axis depending on the property\n      .build(), // Creates the array of configured models\n  WATERLOGGED); // Ignores WATERLOGGED property\n")),(0,r.kt)("h3",{id:"multipartblockstatebuilder"},(0,r.kt)("inlineCode",{parentName:"h3"},"MultiPartBlockStateBuilder")),(0,r.kt)("p",null,"Multiparts can be generated using ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockStateProvider#getMultipartBuilder"),". Each part (",(0,r.kt)("inlineCode",{parentName:"p"},"MultiPartBlockStateBuilder#part"),") specifies a group of conditions of properties which when matches a ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockState")," in a level, will display a model from the model list. All condition groups that match the ",(0,r.kt)("inlineCode",{parentName:"p"},"BlockState")," will display their chosen model overlaid on each other."),(0,r.kt)("p",null,"For any part (obtained via ",(0,r.kt)("inlineCode",{parentName:"p"},"ConfiguredModel$Builder#addModel"),"), a condition can be added (via ",(0,r.kt)("inlineCode",{parentName:"p"},"#condition"),") when a property is one of the specified values. Conditions must all succeed or, when ",(0,r.kt)("inlineCode",{parentName:"p"},"#useOr")," is set, at least one must succeed. Conditions can be grouped (via ",(0,r.kt)("inlineCode",{parentName:"p"},"#nestedGroup"),") as long as the current grouping only contains other groups and no single conditions. Groups of conditions can be left using ",(0,r.kt)("inlineCode",{parentName:"p"},"#endNestedGroup")," and a given part can be finished via ",(0,r.kt)("inlineCode",{parentName:"p"},"#end"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// In some BlockStateProvider#registerStatesAndModels\n\n// Redstone Wire\nthis.getMultipartBuilder(REDSTONE) // Get multipart builder\n  .part() // Create part\n    .modelFile(redstoneDot) // Can show 'redstoneDot'\n    .addModel() // 'redstoneDot' is displayed when...\n    .useOr() // At least one of these conditions are true\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(WEST_REDSTONE, NONE) // true when WEST_REDSTONE is NONE\n      .condition(EAST_REDSTONE, NONE) // true when EAST_REDSTONE is NONE\n      .condition(SOUTH_REDSTONE, NONE) // true when SOUTH_REDSTONE is NONE\n      .condition(NORTH_REDSTONE, NONE) // true when NORTH_REDSTONE is NONE\n    .endNestedGroup() // End group\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(EAST_REDSTONE, SIDE, UP) // true when EAST_REDSTONE is SIDE or UP\n      .condition(NORTH_REDSTONE, SIDE, UP) // true when NORTH_REDSTONE is SIDE or UP\n    .endNestedGroup() // End group\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(EAST_REDSTONE, SIDE, UP) // true when EAST_REDSTONE is SIDE or UP\n      .condition(SOUTH_REDSTONE, SIDE, UP) // true when SOUTH_REDSTONE is SIDE or UP\n    .endNestedGroup() // End group\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(WEST_REDSTONE, SIDE, UP) // true when WEST_REDSTONE is SIDE or UP\n      .condition(SOUTH_REDSTONE, SIDE, UP) // true when SOUTH_REDSTONE is SIDE or UP\n    .endNestedGroup() // End group\n    .nestedGroup() // true when all grouped conditions are true\n      .condition(WEST_REDSTONE, SIDE, UP) // true when WEST_REDSTONE is SIDE or UP\n      .condition(NORTH_REDSTONE, SIDE, UP) // true when NORTH_REDSTONE is SIDE or UP\n    .endNestedGroup() // End group\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneSide0) // Can show 'redstoneSide0'\n    .addModel() // 'redstoneSide0' is displayed when...\n    .condition(NORTH_REDSTONE, SIDE, UP) // NORTH_REDSTONE is SIDE or UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneSideAlt0) // Can show 'redstoneSideAlt0'\n    .addModel() // 'redstoneSideAlt0' is displayed when...\n    .condition(SOUTH_REDSTONE, SIDE, UP) // SOUTH_REDSTONE is SIDE or UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneSideAlt1) // Can show 'redstoneSideAlt1'\n    .rotationY(270) // Rotates 'redstoneSideAlt1' 270 degrees on the Y axis\n    .addModel() // 'redstoneSideAlt1' is displayed when...\n    .condition(EAST_REDSTONE, SIDE, UP) // EAST_REDSTONE is SIDE or UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneSide1) // Can show 'redstoneSide1'\n    .rotationY(270) // Rotates 'redstoneSide1' 270 degrees on the Y axis\n    .addModel() // 'redstoneSide1' is displayed when...\n    .condition(WEST_REDSTONE, SIDE, UP) // WEST_REDSTONE is SIDE or UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneUp) // Can show 'redstoneUp'\n    .addModel() // 'redstoneUp' is displayed when...\n    .condition(NORTH_REDSTONE, UP) // NORTH_REDSTONE is UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneUp) // Can show 'redstoneUp'\n    .rotationY(90) // Rotates 'redstoneUp' 90 degrees on the Y axis\n    .addModel() // 'redstoneUp' is displayed when...\n    .condition(EAST_REDSTONE, UP) // EAST_REDSTONE is UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneUp) // Can show 'redstoneUp'\n    .rotationY(180) // Rotates 'redstoneUp' 180 degrees on the Y axis\n    .addModel() // 'redstoneUp' is displayed when...\n    .condition(SOUTH_REDSTONE, UP) // SOUTH_REDSTONE is UP\n    .end() // Finish part\n  .part() // Create part\n    .modelFile(redstoneUp) // Can show 'redstoneUp'\n    .rotationY(270) // Rotates 'redstoneUp' 270 degrees on the Y axis\n    .addModel() // 'redstoneUp' is displayed when...\n    .condition(WEST_REDSTONE, UP) // WEST_REDSTONE is UP\n    .end(); // Finish part\n")),(0,r.kt)("h2",{id:"model-loader-builders"},"Model Loader Builders"),(0,r.kt)("p",null,"Custom model loaders can also be generated for a given ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder"),". Custom model loaders subclass ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomLoaderBuilder")," and can be applied to a ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder")," via ",(0,r.kt)("inlineCode",{parentName:"p"},"#customLoader"),". The factory method passed in creates a new loader builder to which configurations can be made. After all the changes have been finished, the custom loader can return back to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder")," via ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomLoaderBuilder#end"),"."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Model Builder"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Factory Method"),(0,r.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"DynamicFluidContainerModelBuilder")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"#begin")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Generates a bucket model for the specified fluid.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"CompositeModelBuilder")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"#begin")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Generates a model composed of models.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"ItemLayersModelBuilder")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"#begin")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Generates a Forge implementation of an ",(0,r.kt)("inlineCode",{parentName:"td"},"item/generated")," model.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"SeparateTransformsModelBuilder")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"#begin")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Generates a model which changes based on the specified ",(0,r.kt)("a",{parentName:"td",href:"/docs/rendering/modelloaders/transform"},"transform"),".")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"ObjModelBuilder")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"#begin")),(0,r.kt)("td",{parentName:"tr",align:"left"},"Generates an ",(0,r.kt)("a",{parentName:"td",href:"/docs/rendering/modelloaders/#wavefront-obj-models"},"OBJ model"),".")))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// For some BlockModelBuilder builder\nbuilder.customLoader(ObjModelBuilder::begin) // Custom loader \'forge:obj\'\n  .modelLocation(modLoc("models/block/model.obj")) // Set the OBJ model location\n  .flipV(true) // Flips the V coordinate in the supplied .mtl texture\n  .end() // Finish custom loader configuration\n.texture("particle", mcLoc("block/dirt")) // Set particle texture to dirt\n.texture("texture0", mcLoc("block/dirt")); // Set \'texture0\' texture to dirt\n')),(0,r.kt)("h2",{id:"custom-model-loader-builders"},"Custom Model Loader Builders"),(0,r.kt)("p",null,"Custom loader builders can be created by extending ",(0,r.kt)("inlineCode",{parentName:"p"},"CustomLoaderBuilder"),". The constructor can still have a ",(0,r.kt)("inlineCode",{parentName:"p"},"protected")," visibility with the ",(0,r.kt)("inlineCode",{parentName:"p"},"ResourceLocation")," hardcoded to the loader id registered via ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelEvent$RegisterGeometryLoaders#register"),". The builder can then be initialized via a static factory method or the constructor if made ",(0,r.kt)("inlineCode",{parentName:"p"},"public"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public class ExampleLoaderBuilder<T extends ModelBuilder<T>> extends CustomLoaderBuilder<T> {\n  public static <T extends ModelBuilder<T>> ExampleLoaderBuilder<T> begin(T parent, ExistingFileHelper existingFileHelper) {\n    return new ExampleLoaderBuilder<>(parent, existingFileHelper);\n  }\n\n  protected ExampleLoaderBuilder(T parent, ExistingFileHelper existingFileHelper) {\n    super(new ResourceLocation(MOD_ID, "example_loader"), parent, existingFileHelper);\n  }\n}\n')),(0,r.kt)("p",null,"Afterwards, any configurations specified by the loader should be added as chainable methods."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// In ExampleLoaderBuilder\npublic ExampleLoaderBuilder<T> exampleInt(int example) {\n  // Set int\n  return this;\n}\n\npublic ExampleLoaderBuilder<T> exampleString(String example) {\n  // Set string\n  return this;\n}\n")),(0,r.kt)("p",null,"If any additional configuration is specified, ",(0,r.kt)("inlineCode",{parentName:"p"},"#toJson")," should be overridden to write the additional properties."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// In ExampleLoaderBuilder\n@Override\npublic JsonObject toJson(JsonObject json) {\n  json = super.toJson(json); // Handle base loader properties\n  // Encode custom loader properties\n  return json;\n}\n")),(0,r.kt)("h2",{id:"custom-model-providers"},"Custom Model Providers"),(0,r.kt)("p",null,"Custom model providers require a ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder")," subclass, which defines the base of the model to generate, and a ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelProvider")," subclass, which generates the models."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder")," subclass contains any special properties to which can be applied specifically to those types of models (item models can have overrides). If any additional properties are added, ",(0,r.kt)("inlineCode",{parentName:"p"},"#toJson")," needs to be overridden to write the additional information."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class ExampleModelBuilder extends ModelBuilder<ExampleModelBuilder> {\n  // ...\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelProvider")," subclass requires no special logic. The constructor should hardcode the subdirectory within the ",(0,r.kt)("inlineCode",{parentName:"p"},"models")," folder and the ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelBuilder")," to represent the to-be-generated models."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class ExampleModelProvider extends ModelProvider<ExampleModelBuilder> {\n\n  public ExampleModelProvider(PackOutput output, String modid, ExistingFileHelper existingFileHelper) {\n    // Models will be generated to 'assets/<modid>/models/example' if no 'modid' is specified in '#getBuilder'\n    super(output, modid, \"example\", ExampleModelBuilder::new, existingFileHelper);\n  }\n}\n")),(0,r.kt)("h2",{id:"custom-model-consumers"},"Custom Model Consumers"),(0,r.kt)("p",null,"Custom model consumers like ",(0,r.kt)("a",{parentName:"p",href:"#block-state-provider"},(0,r.kt)("inlineCode",{parentName:"a"},"BlockStateProvider"))," can be created by manually generating the models themselves. The ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelProvider")," subclass used to generate the models should be specified and made available."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public class ExampleModelConsumerProvider implements IDataProvider {\n\n  public ExampleModelConsumerProvider(PackOutput output, String modid, ExistingFileHelper existingFileHelper) {\n    this.example = new ExampleModelProvider(output, modid, existingFileHelper);\n  }\n}\n")),(0,r.kt)("p",null,"Once the data provider is running, the models within the ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelProvider")," subclass can be generated using ",(0,r.kt)("inlineCode",{parentName:"p"},"ModelProvider#generateAll"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// In ExampleModelConsumerProvider\n@Override\npublic CompletableFuture<?> run(CachedOutput cache) {\n  // Populate the model provider\n  CompletableFuture<?> exampleFutures = this.example.generateAll(cache); // Generate the models\n\n  // Run logic and create CompletableFuture(s) for writing files\n  // ...\n\n  // Assume we have a new CompletableFuture providerFuture\n  return CompletableFuture.allOf(exampleFutures, providerFuture);\n}\n")))}c.isMDXComponent=!0}}]);